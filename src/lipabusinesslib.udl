enum Network {
    "Bitcoin",
    "Testnet",
    "Signet",
    "Regtest",
};

enum LogLevel {
    "Error",
    "Warn",
    "Info",
    "Debug",
    "Trace",
};

enum RuntimeErrorCode {
    "RemoteServiceUnavailable",
    "GenericError",
};

[Error]
interface LipaError {
    InvalidInput(string message);
    RuntimeError(RuntimeErrorCode code, string message);
    PermanentFailure(string message);
};

dictionary KeyPair {
    string secret_key;
    string public_key;
};

dictionary Descriptors {
    string spend_descriptor;
    string watch_descriptor;
};

dictionary WalletKeys {
    KeyPair wallet_keypair;
    Descriptors wallet_descriptors;
};

dictionary Config {
    string electrum_url;
    string wallet_db_path;
    Network network;
    string watch_descriptor;
};

dictionary Balance {
    u64 confirmed;
    u64 trusted_pending;
    u64 untrusted_pending;
    u64 immature;
};

enum AddressValidationResult {
    "Valid",
    "Invalid",
};

interface Wallet {
    [Throws=LipaError]
    constructor(Config config);
    [Throws=LipaError]
    Balance sync_balance();

    AddressValidationResult validate_addr(string addr);

    [Throws=LipaError]
    Tx prepare_drain_tx(string addr);

    [Throws=LipaError]
    void sign_and_broadcast_tx(Tx tx, string spend_descriptor);

    [Throws=LipaError]
    TxStatus get_tx_status(string txid);
};

dictionary Tx {
    string id;
    sequence<u8> blob;
    u64 on_chain_fee_sat;
    u64 output_sat;
};

[Enum]
interface TxStatus {
    NotInMempool();
    InMempool();
    Confirmed(u32 number_of_blocks);
};

namespace lipabusinesslib {
    void init_native_logger_once(LogLevel min_level);
    [Throws=LipaError]
    sequence<string> generate_mnemonic();
    [Throws=LipaError]
    WalletKeys derive_keys(Network network, sequence<string> mnemonic_string);
    [Throws=LipaError]
    string sign(string message, string private_key);
    KeyPair generate_keypair();
};
