enum Network {
    "Bitcoin",
    "Testnet",
    "Signet",
    "Regtest",
};

enum LogLevel {
    "Error",
    "Warn",
    "Info",
    "Debug",
    "Trace",
};

[Error]
enum KeyGenerationError {
    "EntropyGeneration",
    "MnemonicFromEntropy",
};

[Error]
enum KeyDerivationError {
    "Derivation",
    "DerivationPathParse",
    "DescKeyFromXPriv",
    "DescPubKeyFromDescSecretKey",
    "DescSecretKeyFromDescKey",
    "ExtendedKeyFromMnemonic",
    "ExtendedKeyFromXPriv",
    "MnemonicParsing",
    "XPrivFromExtendedKey",
};

[Error]
enum WalletError {
    "BdkWallet",
    "ChainBackendClient",
    "ChainSync",
    "GetBalance",
    "OpenDatabase",
    "OpenDatabaseTree",
};

[Error]
enum SigningError {
    "MessageHashing",
    "SecretKeyParse",
};

[Error]
enum AddrError {
    "InvalidAddr",
};

[Error]
enum GetStatusError {
    "GetStatusFailure",
};

dictionary KeyPair {
    string secret_key;
    string public_key;
};

dictionary Descriptors {
    string spend_descriptor;
    string watch_descriptor;
};

dictionary WalletKeys {
    KeyPair wallet_keypair;
    Descriptors wallet_descriptors;
};

dictionary Config {
    string electrum_url;
    string wallet_db_path;
    Network network;
    string watch_descriptor;
};

dictionary Balance {
    u64 confirmed;
    u64 trusted_pending;
    u64 untrusted_pending;
    u64 immature;
};

interface Wallet {
    [Throws=WalletError]
    constructor(Config config);
    [Throws=WalletError]
    Balance sync_balance();

    [Throws=WalletError]
    DrainTx prepare_drain_tx(string addr);

    [Throws=WalletError]
    void sign_and_broadcast_tx(DrainTx tx, string spend_descriptor);
};

dictionary DrainTx {
    string id;
    sequence<u8> serialized_tx;
    u64 fee_sat;
    u64 output_sat;
};

[Enum]
interface TxStatus {
    NotInMempool();
    InMempool();
    Confirmed(u32 number_of_blocks);
};

namespace lipabusinesslib {
    void init_native_logger_once(LogLevel min_level);
    [Throws=KeyGenerationError]
    sequence<string> generate_mnemonic();
    [Throws=KeyDerivationError]
    WalletKeys derive_keys(Network network, sequence<string> mnemonic_string);
    [Throws=SigningError]
    string sign(string message, string private_key);
    KeyPair generate_keypair();

    [Throws=AddrError]
    void validate_addr(string addr);

    [Throws=GetStatusError]
    TxStatus get_tx_status(string txid);
};
